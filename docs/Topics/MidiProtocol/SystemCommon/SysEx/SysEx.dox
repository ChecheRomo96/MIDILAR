////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** 
 * @addtogroup MIDI_SC_SysEx
 * This subset of messages allow MIDI devices to exchange manufacturer-specific 
 * or extended data that is not covered by standard MIDI Control Change (CC) messages. 
 * These messages start with a **SysEx Start byte (`0xF0`)** and end with a **SysEx End byte (`0xF7`)**.
 * 
 * SysEx messages can be used for:
 * - **Device Configuration**: Sending custom settings to synthesizers, effects processors, and controllers.
 * - **Firmware Updates**: Transmitting firmware data to compatible MIDI hardware.
 * - **Custom MIDI Data**: Communicating non-standard MIDI information between devices.
 * 
 * ### Message Structure
 * A **MIDI SysEx message** follows this structure:
 * 
 * | Byte       | Value Range      | Description                                |
 * |-----------|----------------|--------------------------------------------|
 * | **Start**  | `0xF0`         | System Exclusive Start (marks beginning of SysEx data). |
 * | **Manufacturer ID** | `0x00 - 0x7F` | Identifies the manufacturer (0x7E for universal non-real-time, 0x7F for real-time). |
 * | **Data Bytes** | `0x00 - 0x7F` | Custom data payload (device-specific). |
 * | **End**    | `0xF7`         | System Exclusive End (marks end of SysEx data). |
 * 
 * ### Creating a System Exclusive Message
 * The **SysEx Start (`0xF0`)** and **SysEx End (`0xF7`)** bytes are required for every SysEx transmission.
 * 
 * #### **Example 1: Sending a Basic SysEx Message**
 * @code{.cpp}
 * uint8_t message[] = {MIDI_SYSEX_START, 0x7E, 0x09, 0x01, 0xF7}; // Universal Non-Real-Time SysEx
 * @endcode
 * 
 * #### **Example 2: Sending a Manufacturer-Specific SysEx Message**
 * @code{.cpp}
 * uint8_t message[] = {MIDI_SYSEX_START, 0x41, 0x10, 0x42, 0x12, 0x34, 0x56, MIDI_SYSEX_END}; // Roland SysEx
 * @endcode
 * 
 * ### Use Cases
 * - **Sending custom device parameters** to synthesizers, controllers, and effects units.
 * - **Querying device information** such as firmware version, settings, and presets.
 * - **Performing MIDI bulk dumps** to save or restore device configurations.
 * - **Updating firmware** for MIDI-compatible hardware.
 * 
 * **Note:** SysEx messages can vary in length and structure depending on the manufacturer. 
 * Always refer to the specific deviceâ€™s **MIDI implementation chart** for details.
 */
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
